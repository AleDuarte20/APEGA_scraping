{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [],
    "entries": [
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://www.apega.ca/members/permit-holder-directory?page=1",
                "lineNumber": 158,
                "columnNumber": 64
              },
              {
                "functionName": "",
                "scriptId": "7",
                "url": "https://www.apega.ca/members/permit-holder-directory?page=1",
                "lineNumber": 159,
                "columnNumber": 2
              }
            ]
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://www.googletagmanager.com/gtm.js?id=GTM-WKMT44G",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "Referer",
              "value": "https://www.apega.ca/"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "id",
              "value": "GTM-WKMT44G"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_FAILED"
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-08-26T19:16:35.868Z",
        "time": 156.18199997697957,
        "timings": {
          "blocked": 156.18199997697957,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://www.apega.ca/members/permit-holder-directory?page=1",
          "lineNumber": 489
        },
        "_priority": "Low",
        "_resourceType": "other",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/images/symbol-defs.svg",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "Referer",
              "value": "https://www.apega.ca/members/permit-holder-directory?page=1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_FAILED"
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-08-26T19:16:35.987Z",
        "time": 42.41999998339452,
        "timings": {
          "blocked": 42.41999998339452,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://www.apega.ca/members/permit-holder-directory?page=1",
          "lineNumber": 491
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://www.apega.ca/images/default-source/default-album/kananaskis-dam.jpg?sfvrsn=19e6537b_0",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "Referer",
              "value": "https://www.apega.ca/members/permit-holder-directory?page=1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "sfvrsn",
              "value": "19e6537b_0"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_FAILED"
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-08-26T19:16:35.990Z",
        "time": 62.37799997325055,
        "timings": {
          "blocked": 62.37799997325055,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "value",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 12442
              },
              {
                "functionName": "",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 644
              },
              {
                "functionName": "value",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 607
              },
              {
                "functionName": "",
                "scriptId": "9",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/permitholders-serviceview.min.js",
                "lineNumber": 0,
                "columnNumber": 4570
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "fetch",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://ods.apega.ca/odata/v1/Register/Taxonomies?$orderby=Title",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "Referer",
              "value": "https://www.apega.ca/"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "$orderby",
              "value": "Title"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "content-length",
              "value": "157801"
            }
          ],
          "cookies": [],
          "content": {
            "size": 157801,
            "mimeType": "x-unknown",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 157840,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-08-26T19:16:36.039Z",
        "time": 5.016000010073185,
        "timings": {
          "blocked": 5.015000002458692,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": null,
          "receive": 0.00100000761449337,
          "_blocked_queueing": 5.015000002458692
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "Medium",
        "_resourceType": "manifest",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://www.apega.ca/manifest.json",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "Referer",
              "value": "https://www.apega.ca/members/permit-holder-directory?page=1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_FAILED"
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-08-26T19:16:36.066Z",
        "time": 13.374000001931563,
        "timings": {
          "blocked": 13.374000001931563,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 5266
              },
              {
                "functionName": "value",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 5240
              },
              {
                "functionName": "",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 4646
              },
              {
                "functionName": "value",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 4618
              },
              {
                "functionName": "",
                "scriptId": "8",
                "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                "lineNumber": 0,
                "columnNumber": 798
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "8",
                  "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                  "lineNumber": 0,
                  "columnNumber": 651
                },
                {
                  "functionName": "value",
                  "scriptId": "8",
                  "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/serviceview-base.min.js",
                  "lineNumber": 0,
                  "columnNumber": 607
                },
                {
                  "functionName": "",
                  "scriptId": "9",
                  "url": "https://www.apega.ca/ResourcePackages/Talon/assets/dist/js/permitholders-serviceview.min.js",
                  "lineNumber": 0,
                  "columnNumber": 4570
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "fetch",
        "cache": {},
        "connection": "40",
        "request": {
          "method": "GET",
          "url": "https://ods.apega.ca/odata/v1/Register/PermitHolders?$count=true&$top=12&$expand=ResponsibleMembers&$orderby=LegalName",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": ":authority",
              "value": "ods.apega.ca"
            },
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":path",
              "value": "/odata/v1/Register/PermitHolders?$count=true&$top=12&$expand=ResponsibleMembers&$orderby=LegalName"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "referer",
              "value": "https://www.apega.ca/"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "sec-fetch-dest",
              "value": "empty"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-site"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [
            {
              "name": "$count",
              "value": "true"
            },
            {
              "name": "$top",
              "value": "12"
            },
            {
              "name": "$expand",
              "value": "ResponsibleMembers"
            },
            {
              "name": "$orderby",
              "value": "LegalName"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "name": "cf-ray",
              "value": "740ee7178a30a4d2-GRU"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json; odata.metadata=minimal; odata.streaming=true"
            },
            {
              "name": "date",
              "value": "Fri, 26 Aug 2022 19:16:36 GMT"
            },
            {
              "name": "expect-ct",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "name": "odata-version",
              "value": "4.0"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=2592000"
            },
            {
              "name": "x-powered-by",
              "value": "ASP.NET"
            }
          ],
          "cookies": [],
          "content": {
            "size": 6690,
            "mimeType": "application/json",
            "text": "{\"@odata.context\":\"https://ods.apega.ca/odata/v1/Register/$metadata#PermitHolders(ResponsibleMembers())\",\"@odata.count\":4754,\"value\":[{\"CompanyID\":\"978818\",\"PermitNumber\":\"13332\",\"LegalName\":\"0906670 BC Ltd. o/a Rocky Point Engineering\",\"PublicName\":\"\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"208-20171 92A AVE\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Langley\",\"Country\":\"Canada\",\"Province\":\"BC\",\"ZipCode\":\"V1M 3A5\",\"DateIssued\":\"2016-01-04\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"604\",\"PhoneNumber\":\"888-7779\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"9d4ef7f90245c809d88483657b693cd7765c05b624d3d2e319813798dca617f4\",\"Title\":\"Richard Corra\"}]},{\"CompanyID\":\"976680\",\"PermitNumber\":\"12787\",\"LegalName\":\"1001874 Alberta Ltd.\",\"PublicName\":\"Life Cycle Design\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"479 OZERNA RD NW\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Edmonton\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T5Z 3P8\",\"DateIssued\":\"2014-07-24\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"780\",\"PhoneNumber\":\"916-1745\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"a7acb92825592ca90fb8eb0528b1a1e07c6c3f41027135f9367528bafccda550\",\"Title\":\"Gordon Vetro\"}]},{\"CompanyID\":\"953619\",\"PermitNumber\":\"7998\",\"LegalName\":\"1009060 Alberta Ltd o/a Geodetic Surveys & Engineering Ltd\",\"PublicName\":\"Geodetic Surveys & Engineering Ltd\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"9538 87 ST NW\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Edmonton\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T6C 3J1\",\"DateIssued\":\"2002-11-01\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"780\",\"PhoneNumber\":\"465-3389\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"6b211c6484b6a1c9233ff805938768707b37a7d3ba2e93684bae1495a9eb6949\",\"Title\":\"Andrew Banack\"}]},{\"CompanyID\":\"953980\",\"PermitNumber\":\"8064\",\"LegalName\":\"1025883 Alberta Ltd o/a ET Consulting\",\"PublicName\":\"ET Consulting\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"739 WILLAMETTE DR SE\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Calgary\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T2J 2A3\",\"DateIssued\":\"2003-01-21\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"403\",\"PhoneNumber\":\"271-5312\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"b376ccdb7d3af70ab7322f5bbe4d1fb55fd215a54dacbf4edd6448dd7ed846c8\",\"Title\":\"Edward Tahmazian\"}]},{\"CompanyID\":\"967538\",\"PermitNumber\":\"11105\",\"LegalName\":\"1038473 Alberta Ltd\",\"PublicName\":\"\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"118 GLENEAGLES ESTATES LANE\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Cochrane\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T4C 2H7\",\"DateIssued\":\"2010-09-09\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"403\",\"PhoneNumber\":\"852-2994\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"72a02eb6ed424006d8e4749c49b84182886249483c5b235bddb41732f562d7f8\",\"Title\":\"Mark Smigelski\"}]},{\"CompanyID\":\"955432\",\"PermitNumber\":\"8430\",\"LegalName\":\"1089079 Alberta Inc\",\"PublicName\":\"\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"80 HAWKHILL RD NW\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Calgary\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T3G 3H8\",\"DateIssued\":\"2004-02-26\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"403\",\"PhoneNumber\":\"239-7193\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"fbfeffba43091d89dbbba26c1dbdd0fea09d3854c99ba8db38f6b11884679f21\",\"Title\":\"Derek Warltier\"}]},{\"CompanyID\":\"957097\",\"PermitNumber\":\"8871\",\"LegalName\":\"1104175 Alberta Limited\",\"PublicName\":\"ESE-LSS Life Safety Systems Technologies\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"PO Box 531\",\"AddressLine2\":\"9768 170 St\",\"AddressLine3\":\"\",\"City\":\"Edmonton\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T5T 5L4\",\"DateIssued\":\"2005-08-01\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"780\",\"PhoneNumber\":\"448-2051\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"a4ad5e30ec1882cde6e500a939a19361f430bf78d05c9afee4b724696bd5a61a\",\"Title\":\"Emad El-Zein\"}]},{\"CompanyID\":\"981701\",\"PermitNumber\":\"15683\",\"LegalName\":\"1104229 BC Ltd.\",\"PublicName\":\"\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"977 Wellington Dr\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"North Vancouver\",\"Country\":\"Canada\",\"Province\":\"BC\",\"ZipCode\":\"V7K 1L1\",\"DateIssued\":\"2022-04-07\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"604\",\"PhoneNumber\":\"339-6549\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"8cb6b698a4b592465ac1a79fed492830f1cd08f7fd5bab74b31ff440ce709fc4\",\"Title\":\"Soheil Soleimani-Vafa\"}]},{\"CompanyID\":\"964656\",\"PermitNumber\":\"10519\",\"LegalName\":\"1109883 Alberta Ltd.\",\"PublicName\":\"E.B. Jacobsen & Consulting Group\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"101-18146 105 Ave NW\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Edmonton\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T5S 2T4\",\"DateIssued\":\"2009-02-25\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"780\",\"PhoneNumber\":\"484-1095\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"25b3bbf8b47e1170e46859d279370b28acb82528bc9d53fc6bb4314876e09d5a\",\"Title\":\"Erik Jacobsen\"}]},{\"CompanyID\":\"959358\",\"PermitNumber\":\"10084\",\"LegalName\":\"1156182 Alberta Ltd\",\"PublicName\":\"\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"99 SUN HARBOUR CRES SE\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Calgary\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T2X 3B3\",\"DateIssued\":\"2008-02-20\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"403\",\"PhoneNumber\":\"830-4942\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"2ae05768072c1781e99b621bea1ca01e45806fc832674397e3c990852a771f4c\",\"Title\":\"Chris Valcourt\"}]},{\"CompanyID\":\"981289\",\"PermitNumber\":\"15226\",\"LegalName\":\"11811347 Canada Inc.\",\"PublicName\":\"Au Zone Technologies\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"114-1215 13 St SE\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Calgary\",\"Country\":\"Canada\",\"Province\":\"AB\",\"ZipCode\":\"T2G 3J4\",\"DateIssued\":\"2020-11-24\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"403\",\"PhoneNumber\":\"261-9985\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"cfabed6c1487d7b7fe9c014d532aaff1118b69fbfdca01629f5b620617106a2b\",\"Title\":\"Trevor Zaharichuk\"}]},{\"CompanyID\":\"980773\",\"PermitNumber\":\"14681\",\"LegalName\":\"1191027 BC Ltd.\",\"PublicName\":\"Infinity Solutions\",\"FullPracticeDesignation\":\"Engineering\",\"AddressLine1\":\"Box 73\",\"AddressLine2\":\"\",\"AddressLine3\":\"\",\"City\":\"Cranbrook\",\"Country\":\"Canada\",\"Province\":\"BC\",\"ZipCode\":\"V1C 4H6\",\"DateIssued\":\"2019-04-11\",\"PhoneCountryCode\":\"1\",\"PhoneAreaCode\":\"250\",\"PhoneNumber\":\"464-0632\",\"PhoneExtension\":\"\",\"ResponsibleMembers\":[{\"MemberID\":\"4252403501d028052cd5a5585adaddf50b997d5208fc1e291aa8bd6ed4edb5f3\",\"Title\":\"Doug Vanhooren\"}]}]}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2050,
          "_error": null
        },
        "serverIPAddress": "172.67.15.43",
        "startedDateTime": "2022-08-26T19:16:36.083Z",
        "time": 999.5360000175424,
        "timings": {
          "blocked": 71.01900000006333,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.4300000000000068,
          "wait": 926.9010000088774,
          "receive": 1.1860000086016953,
          "_blocked_queueing": 4.79300000006333
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "request": {
          "method": "GET",
          "url": "https://www.apega.ca/favicon.ico",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\""
            },
            {
              "name": "Referer",
              "value": "https://www.apega.ca/members/permit-holder-directory?page=1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_FAILED"
        },
        "serverIPAddress": "",
        "startedDateTime": "2022-08-26T19:16:36.084Z",
        "time": 5.827999993925914,
        "timings": {
          "blocked": 5.827999993925914,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      }
    ]
  }
}